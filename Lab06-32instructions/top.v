`timescale 1ns / 1ps


module Top(input clock,input reset);
    //input wire clock;
    //input reset;
    reg [31:0] PC;
    wire REG_DST,JUMP,JUMP1,BRANCH,MEM_READ,MEM_TO_REG,MEM_WRITE,JUMPTARGET,CALL,BRANCHEQUAL;
    wire [1:0] SIGNED;
    wire [2:0] ALU_OP;
    wire ALU_SRC,REG_WRITE;//Signals generated by control unit
    
    wire [3:0] ALUCTR;
    
	wire [31:0] INST;//PC and instruction memory
	
	wire [4:0] WRITEREG;
	wire [4:0] READREG1;
	wire [4:0] READREG2;
	wire [31:0] REGREADDATA1;
	wire [31:0] REGREADDATA2;
	wire [31:0] REGWRITEDATA;//register file
	
	wire [31:0] INSTSHIFTED;
    wire [31:0] SIGNEXTENDED,ZEROEXTENDED,LEFTSHIFTED;
	wire [31:0] EXTENDSHIFTED;
	
	wire [31:0] ALUSRC1;
	wire [31:0] ALUSRC2;

    wire ZERO,OVERFLOW;
	wire [31:0] ALURSLT;//main ALU
	
	wire [31:0] MEM_DATA;
	wire [31:0] PC_PLUS_4;

	wire [31:0] IFID_PCPLUS4,IFID_INST;

	wire [31:0] IDEX_PCPLUS4,IDEX_READDATA1,IDEX_READDATA2,IDEX_SIGNEXTENDED,IDEX_ZEROEXTENDED,IDEX_LEFTSHIFTED;
	wire [4:0] IDEX_RS;
	wire [4:0] IDEX_RT,IDEX_RD;
	wire [6:0] IDEX_EX;
	wire [4:0] IDEX_M;
	wire [1:0] IDEX_WB;
	wire IDEX_CALL,IDEX_BRANCHEQUAL;

	wire [1:0] EXMEM_WB;
	wire [4:0] EXMEM_M;
	wire [31:0] EXMEM_BRANCHTARGET,EXMEM_JUMPTARGETADDRESS,EXMEM_ALURESULT,EXMEM_MEMWRITEDATA,EXMEM_PCPLUS4;
	wire [4:0] EXMEM_WRITEREG;
	wire EXMEM_ZERO,EXMEM_BRANCH,EXMEM_CALL,EXMEM_BRANCHEQUAL;
	wire CTRL_FLUSH;
	wire STALL;
	wire MEMWB_REGWRITE,MEMWB_MEMTOREG,MEMWB_CALL;
	wire [31:0] MEMWB_MEMREADDATA,MEMWB_ALURESULT,MEMWB_PCPLUS4;
	wire [4:0] MEMWB_WRITEREG;
	wire [1:0] FORWARDA,FORWARDB;
	wire [31:0] INPUT1,INPUT2;

	instrMemory instruction_memory(//
	    .readAddress(PC),

	    .instruction(INST)
	);

	assign PC_PLUS_4=PC+4;
	assign CTRL_FLUSH=(EXMEM_BRANCHEQUAL?(EXMEM_ZERO&&EXMEM_M[2]):(!EXMEM_ZERO&&EXMEM_M[2]))||EXMEM_M[3];
	assign STALL=IDEX_M[1]&&((IDEX_RT==IFID_INST[25:21])||(IDEX_RT==IFID_INST[20:16]));
	always @ (posedge clock)
	begin
	    if(reset) PC<=0;
	    else PC<=STALL?PC:((EXMEM_ZERO&&EXMEM_M[2])?EXMEM_BRANCHTARGET:(EXMEM_M[3]?EXMEM_JUMPTARGETADDRESS:PC_PLUS_4));
	end

    IFID ifid(//
        .clock(clock),
        .reset(reset),
		.instruction_in(CTRL_FLUSH?0:(STALL?IFID_INST:INST)),
		.PC_Plus_4(CTRL_FLUSH?0:(STALL?IFID_PCPLUS4:PC_PLUS_4)),

		.IFID_PCplus4(IFID_PCPLUS4),
		.IFID_instruction(IFID_INST)
	);

	Ctr ctr(//
	    .opCode(IFID_INST[31:26]),

	    .regDest(REG_DST),
	    .aluSrc(ALU_SRC),
	    .memToReg(MEM_TO_REG),
	    .regWrite(REG_WRITE),
	    .memRead(MEM_READ),
	    .memWrite(MEM_WRITE),
	    .Branch(BRANCH),
	    .ALUop(ALU_OP),
	    .Jump(JUMP),
	    .Call(CALL),
	    .jumpTarget(JUMPTARGET),
		.Signed(SIGNED),
		.branchEqual(BRANCHEQUAL)
	);
	
	Registers registers(//
	    .clock(clock),
	    .reset(reset),
	    .readReg1(IFID_INST[25:21]),
	    .readReg2(IFID_INST[20:16]),
	    .writeReg(MEMWB_WRITEREG),
	    .writeData(MEMWB_MEMTOREG?MEMWB_MEMREADDATA:(MEMWB_CALL?MEMWB_PCPLUS4:MEMWB_ALURESULT)),// to be improved
	    .regWrite(MEMWB_REGWRITE),

	    .readData1(REGREADDATA1),
	    .readData2(REGREADDATA2)
	);
	signext signext(//
	    .inst(IFID_INST[15:0]),
	    .data(SIGNEXTENDED),
		.zeroextended(ZEROEXTENDED),
		.leftshifted(LEFTSHIFTED)
	);
	IDEX idex(//
	    .clock(clock),
	    .reset(reset),
		.IFID_PCPlus4(CTRL_FLUSH||STALL?0:IFID_PCPLUS4),
		.IFID_rs(CTRL_FLUSH||STALL?0:IFID_INST[25:21]),
		.readData1(CTRL_FLUSH||STALL?0:REGREADDATA1),
		.readData2(CTRL_FLUSH||STALL?0:REGREADDATA2),
		.signextended(CTRL_FLUSH||STALL?0:SIGNEXTENDED),
		.IFID_rt(CTRL_FLUSH||STALL?0:(IFID_INST[20:16])),
		.IFID_rd(CTRL_FLUSH||STALL?0:(CALL?5'b11111:IFID_INST[15:11])),
		.ex(CTRL_FLUSH||STALL?0:{SIGNED,ALU_SRC,ALU_OP,REG_DST}),
		.m(CTRL_FLUSH||STALL?0:{JUMPTARGET,JUMP,BRANCH,MEM_READ,MEM_WRITE}),
		.wb(CTRL_FLUSH||STALL?0:{REG_WRITE,MEM_TO_REG}),
		.call(CALL),
		.zeroextended(CTRL_FLUSH||STALL?0:ZEROEXTENDED),
		.branchEqual(BRANCHEQUAL),
		.leftshifted(CTRL_FLUSH||STALL?0:LEFTSHIFTED),
		
		.IDEX_PCPlus4(IDEX_PCPLUS4),
		.IDEX_readData1(IDEX_READDATA1),
		.IDEX_readData2(IDEX_READDATA2),
		.IDEX_signextended(IDEX_SIGNEXTENDED),
		.IDEX_zeroextended(IDEX_ZEROEXTENDED),
		.IDEX_rs(IDEX_RS),
		.IDEX_rt(IDEX_RT),
		.IDEX_rd(IDEX_RD),
		.IDEX_m(IDEX_M),
		.IDEX_wb(IDEX_WB),
		.IDEX_ex(IDEX_EX),
		.IDEX_call(IDEX_CALL),
		.IDEX_branchEqual(IDEX_BRANCHEQUAL),
		.IDEX_leftshifted(IDEX_LEFTSHIFTED)
	);
	ALUCtr aluctr(//
	    .ALUop(IDEX_EX[3:1]),
	    .functField(IDEX_SIGNEXTENDED[5:0]),
	    .operation(ALUCTR),
	    .Jump(JUMP1)//to be improved
	);
	/*assign INPUT1=(FORWARDA==2'b10)?EXMEM_ALURESULT:
	              ((FORWARDA==2'b01)?(MEMWB_MEMTOREG?MEMWB_MEMREADDATA:MEMWB_ALURESULT):
	              ((ALUCTR==4'b0011||ALUCTR==4'b0100||ALUCTR==4'b1100)?{27'h0,IDEX_SIGNEXTENDED[10:6]}:(IDEX_READDATA1)));*/
    assign INPUT1=(FORWARDA==2'b10)?EXMEM_ALURESULT:
	              ((FORWARDA==2'b01)?(MEMWB_MEMTOREG?MEMWB_MEMREADDATA:MEMWB_ALURESULT):
	              ((IDEX_SIGNEXTENDED[5:0]==0||IDEX_SIGNEXTENDED[5:0]==2||IDEX_SIGNEXTENDED[5:0]==3)?{27'h0,IDEX_SIGNEXTENDED[10:6]}:(IDEX_READDATA1)));
	assign INPUT2=IDEX_EX[4]?(IDEX_EX[6]?IDEX_LEFTSHIFTED:(IDEX_EX[5]?IDEX_SIGNEXTENDED:IDEX_ZEROEXTENDED)):
	               ((FORWARDB==2'b10)?EXMEM_ALURESULT:
	                 ((FORWARDB==2'b01)?(MEMWB_MEMTOREG?MEMWB_MEMREADDATA:MEMWB_ALURESULT):IDEX_READDATA2));
	ALU alu(//
	    .input1(INPUT1),
	    .input2(INPUT2),
	    .aluCtr(ALUCTR),
	    .zero(ZERO),
	    .aluRes(ALURSLT),
	    .overflow(OVERFLOW)
	);
	
    forwardingUnit fu(
        .clock(clock),
        .IDEX_rs(IDEX_RS),
        .IDEX_rt(IDEX_RT),
        .EXMEM_regDest(EXMEM_WRITEREG),
        .MEMWB_regDest(MEMWB_WRITEREG),
        .EXMEM_regWrite(EXMEM_WB[1]),
        .MEMWB_regWrite(MEMWB_REGWRITE),
        .ForwardA(FORWARDA),
        .ForwardB(FORWARDB)
    );   
	EXMEM exmem(//
	    .clock(clock),
	    .reset(reset),
		.IDEX_wb(CTRL_FLUSH?0:IDEX_WB),
		.IDEX_m(CTRL_FLUSH?0:{IDEX_M[4],JUMP1||IDEX_M[3],IDEX_M[2:0]}),
		.EX_branchTarget(CTRL_FLUSH?0:(IDEX_PCPLUS4+(IDEX_SIGNEXTENDED<<2))),
		.EX_jumpTargetAddress(CTRL_FLUSH?0:(IDEX_M[4]?{IDEX_PCPLUS4[31:28],IDEX_RS,IDEX_RT,IDEX_SIGNEXTENDED[15:0],2'b00}:ALURSLT)),
		.EX_aluResult(CTRL_FLUSH?0:(ALURSLT)),
		.EX_zero(CTRL_FLUSH?0:ZERO),
		.EX_memWriteData(CTRL_FLUSH?0:IDEX_READDATA2),
        .EX_writeReg(CTRL_FLUSH?0:(IDEX_EX[0]?IDEX_RD:IDEX_RT)),
        .IDEX_call(CTRL_FLUSH?0:IDEX_CALL),
        .IDEX_PCPlus4(CTRL_FLUSH?0:IDEX_PCPLUS4),
        .IDEX_branchEqual(CTRL_FLUSH?0:IDEX_BRANCHEQUAL),
        
		.EXMEM_wb(EXMEM_WB),
		.EXMEM_m(EXMEM_M),
		.EXMEM_branchTarget(EXMEM_BRANCHTARGET),
		.EXMEM_jumpTargetAddress(EXMEM_JUMPTARGETADDRESS),
		.EXMEM_zero(EXMEM_ZERO),
		.EXMEM_aluResult(EXMEM_ALURESULT),
		.EXMEM_memWriteData(EXMEM_MEMWRITEDATA),
		.EXMEM_writeReg(EXMEM_WRITEREG),
		.EXMEM_call(EXMEM_CALL),
		.EXMEM_PCPlus4(EXMEM_PCPLUS4),
		.EXMEM_branchEqual(EXMEM_BRANCHEQUAL)
	);
	
    

	dataMemory data_memory(
	    .clock(clock),
	    .memWrite(EXMEM_M[0]),
	    .memRead(EXMEM_M[1]),
	    .address(EXMEM_ALURESULT),
	    .writeData(EXMEM_MEMWRITEDATA),
	    .readData(MEM_DATA)
	);
	MEMWB memwb(
	    .clock(clock),
	    .reset(reset),
		.EXMEM_wb(EXMEM_WB),
		.memReadData(MEM_DATA),
		.EXMEM_aluResult(EXMEM_ALURESULT),
		.EXMEM_writeReg(EXMEM_WRITEREG),
		.EXMEM_PCPlus4(EXMEM_PCPLUS4),
		.EXMEM_call(EXMEM_CALL),
		.MEMWB_wb({MEMWB_REGWRITE,MEMWB_MEMTOREG}),
		.MEMWB_writeReg(MEMWB_WRITEREG),
		.MEMWB_aluResult(MEMWB_ALURESULT),
		.MEMWB_memReadData(MEMWB_MEMREADDATA),
		.MEMWB_call(MEMWB_CALL),
		.MEMWB_PCPlus4(MEMWB_PCPLUS4)
	);
	
endmodule
